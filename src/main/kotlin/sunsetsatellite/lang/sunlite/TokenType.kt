package sunsetsatellite.lang.sunlite

import sunsetsatellite.lang.sunlite.TokenType.TokenGroup.*

enum class TokenType(val group: TokenGroup) {
	// Single-character tokens.
	LEFT_PAREN(SINGLE_CHAR), RIGHT_PAREN(SINGLE_CHAR), LEFT_BRACE(SINGLE_CHAR), RIGHT_BRACE(SINGLE_CHAR), LEFT_BRACKET(SINGLE_CHAR), RIGHT_BRACKET(SINGLE_CHAR),
	COMMA(SINGLE_CHAR), DOT(SINGLE_CHAR), MINUS(SINGLE_CHAR), PLUS(SINGLE_CHAR), SEMICOLON(SINGLE_CHAR), SLASH(SINGLE_CHAR), STAR(SINGLE_CHAR), COLON(SINGLE_CHAR), PIPE(SINGLE_CHAR),

	// One or two character tokens.
	BANG(MULTI_CHAR), BANG_EQUAL(MULTI_CHAR),
	EQUAL(MULTI_CHAR), EQUAL_EQUAL(MULTI_CHAR),
	GREATER(MULTI_CHAR), GREATER_EQUAL(MULTI_CHAR),
	LESS(MULTI_CHAR), LESS_EQUAL(MULTI_CHAR),
	PLUS_EQUAL(MULTI_CHAR), MINUS_EQUAL(MULTI_CHAR), /*INCREMENT, DECREMENT,*/

	// Literals.
	IDENTIFIER(LITERALS), STRING(LITERALS), NUMBER(LITERALS),

	// Keywords.
	AND(KEYWORDS), CLASS(KEYWORDS), ELSE(KEYWORDS), FALSE(KEYWORDS), FUN(KEYWORDS), INIT(KEYWORDS), FOR(KEYWORDS), IF(KEYWORDS), NIL(KEYWORDS), OR(KEYWORDS),
	PRINT(KEYWORDS), RETURN(KEYWORDS), SUPER(KEYWORDS), THIS(KEYWORDS), TRUE(KEYWORDS), VAR(KEYWORDS), WHILE(KEYWORDS),
	BREAK(KEYWORDS), CONTINUE(KEYWORDS), STATIC(KEYWORDS), INTERFACE(KEYWORDS), IS(KEYWORDS), IS_NOT(KEYWORDS),
	IMPORT(KEYWORDS), NATIVE(KEYWORDS), DYNAMIC(KEYWORDS), AS(KEYWORDS), EXTENDS(KEYWORDS), IMPLEMENTS(KEYWORDS),
	TRY(KEYWORDS), CATCH(KEYWORDS), THROW(KEYWORDS),

	// Type keywords
	TYPE_STRING(TYPES), TYPE_NUMBER(TYPES), TYPE_BOOLEAN(TYPES), TYPE_FUNCTION(TYPES),
	TYPE_ANY(TYPES), TYPE_ARRAY(TYPES), TYPE_GENERIC(TYPES),

	EOF(END);

	enum class TokenGroup {
		SINGLE_CHAR,
		MULTI_CHAR,
		LITERALS,
		KEYWORDS,
		TYPES,
		END
	}
}