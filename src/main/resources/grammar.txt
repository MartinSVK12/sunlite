program        → declaration* EOF ;

// DECLARATIONS

declaration    → classDecl
               | interfaceDecl
               | funDecl
               | varDecl
               | statement ;

classDecl      → "class" ( typeParam )? IDENTIFIER ( "extends" IDENTIFIER )? ( "implements" IDENTIFIER )?
                 "{" varDecl* method* "}" ;
interfaceDecl  → "interface" ( typeParam )? IDENTIFIER ( "implements" IDENTIFIER ( "," IDENTIFIER )* )?
                 "{" abstractMethod* ")" ;
funDecl        → "fun" ( typeParam )? function ;
varDecl        → ( "static" )? ( "var" | "val" ) IDENTIFIER ( "=" expression )? ( ":" type )? ";" ;

// STATEMENTS

statement      → exprStmt
               | forStmt
               | ifStmt
               | returnStmt
               | whileStmt
               | breakStmt
               | continueStmt
               | importStmt
               | tryCatchStmt
               | block ;

exprStmt       → expression ";" ;
forStmt        → "for" "(" ( varDecl | exprStmt | ";" )
                           expression? ";"
                           expression? ")" statement ;
ifStmt         → "if" "(" expression ")" statement
                 ( "else" statement )? ;
returnStmt     → "return" expression? ";" ;
whileStmt      → "while" "(" expression ")" statement ;
block          → "{" declaration* "}" ;
continueStmt   → "continue;" ;
breakStmt      → "break;" ;
importStmt     → "import" STRING ";" ;
tryCatchStmt   → "try" block "catch" "(" IDENTIFIER ")" block ;

// EXPRESSIONS

expression     → assignment ;

assignment     → ( call "." )? IDENTIFIER "=" assignment
               | logic_or ;

logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → check ( "and" check )* ;
check          → cast ( "is" | "isnt" ) cast ;
cast           → equality ( "as" ) equality ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary | lambda ;
lambda         → ( "fun" ( typeParam )? "(" parameters? ")" ( ":" type )? block ) | call ;
call           → primary ( "(" ( typeParam* )? arguments? ")" | "." IDENTIFIER )* ;
primary        → "true" | "false" | "nil" | "this"
               | NUMBER | STRING | IDENTIFIER | "(" expression ")"
               | "super" "." IDENTIFIER ;

// UTILITY

method         → ( "static" | "native" | "static native" )? "fun" ( typeParam )? methodSignature block? ;
abstractMethod → ( "static" | "native" | "static native" )? "fun" ( typeParam )? methodSignature ;
methodSignature→ IDENTIFIER "(" parameters? ")" ( ":" type )? ;
function       → IDENTIFIER "(" parameters? ")" ( ":" type )? block ;
parameters     → IDENTIFIER ( ":" type )? ( "," IDENTIFIER ( ":" type )? )* ;
arguments      → expression ( "," expression )* ;
type           → ( "Any"
                 | "Nil"
                 | "Number"
                 | "Boolean"
                 | "String"
                 | "Generic" ( typeParam )?
                 | "Function" ( typeParam )?
                 | "Class" ( typeParam )?
                 | IDENTIFIER ( typeParam )?
                 ( "|" type* )? ( "?" )? ) ;
typeParam      → "<" IDENTIFIER ( ( "," IDENTIFIER )* )? ">" ;

// LEXICAL

NUMBER         → DIGIT+ ( "." DIGIT+ )? ;
STRING         → "\"" <any char except "\"">* "\"" ;
IDENTIFIER     → ALPHA ( ALPHA | DIGIT )* ;
ALPHA          → "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT          → "0" ... "9" ;